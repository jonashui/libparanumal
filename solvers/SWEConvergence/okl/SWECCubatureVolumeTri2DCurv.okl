/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


@kernel void SWECCubatureVolumeTri2DCurv(const dlong Nelements,
                                    @restrict const  dfloat *  cubvgeo,
                                    @restrict const  dfloat *  cubvgeoCurv,
                                    @restrict const  dlong *   mapCurv,
                                    @restrict const  dfloat *  cubD,
                                    @restrict const  dfloat *  cubPDT,
                                    @restrict const  dfloat *  cubPDTs,
                                    @restrict const  dfloat *  cubInterp,
                                    @restrict const  dfloat *  cubProject,
                                    @restrict const  dfloat *  x,
                                    @restrict const  dfloat *  y,
                                    @restrict const  dfloat *  z,
                                    const dfloat t,
                                    @restrict const  dfloat *  U,
                                    @restrict const  dfloat *  gradU,
                                    @restrict dfloat *  rhsU){
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared dfloat s_U[p_Nfields][p_Np];
    @shared dfloat s_gradU[p_Ngrads][p_Np];

    @shared dfloat s_F[p_Nfields][p_cubNp];
    @shared dfloat s_G[p_Nfields][p_cubNp];

    if(mapCurv[e] < 0) {
    for(int n=0;n<p_cubNp;++n;@inner(0)){      // for all nodes in this element
      if(n<p_Np){
        const dlong  qbase = e*p_Np*p_Nfields + n;
        const dlong id = e*p_Np*p_Ngrads + n;

        const dfloat h  =U[qbase+0*p_Np];
        const dfloat q = U[qbase+1*p_Np];
        const dfloat p = U[qbase+2*p_Np];


        s_U[0][n] = h;
        s_U[1][n] = q;
        s_U[2][n] = p;

        s_gradU[0][n] = gradU[id+0*p_Np];
        s_gradU[1][n] = gradU[id+1*p_Np];
        s_gradU[2][n] = gradU[id+2*p_Np];
        s_gradU[3][n] = gradU[id+3*p_Np];
        s_gradU[4][n] = gradU[id+4*p_Np];
        s_gradU[5][n] = gradU[id+5*p_Np];

      }
    }

    for(int n=0;n<p_cubNp;++n;@inner(0)){
      //interpolate to cubature
      dfloat h = 0., q = 0., p = 0.;
      dfloat dhdx = 0., dhdy = 0.;
      dfloat dudx = 0., dudy = 0.;
      dfloat dvdx = 0., dvdy = 0.;
      #pragma unroll p_Np
        for(int i=0;i<p_Np;++i){
          const dfloat cIni = cubInterp[n+i*p_cubNp];
          h += cIni*s_U[0][i];
          q += cIni*s_U[1][i];
          p += cIni*s_U[2][i];

          dhdx += cIni*s_gradU[0][i];
          dhdy += cIni*s_gradU[1][i];
          dudx += cIni*s_gradU[2][i];
          dudy += cIni*s_gradU[3][i];
          dvdx += cIni*s_gradU[4][i];
          dvdy += cIni*s_gradU[5][i];
        }

      // F0 = ru, G0 = rv
      s_F[0][n] = q-dhdx;
      s_G[0][n] = p-dhdy;

      // F1 = 2*mu*T11 - (ru^2+p), G1 = 2*mu*T12 - (rvu)
      s_F[1][n] = q*q/h+p_half*p_grav*h*h-h*dudx;
      s_G[1][n] = q*p/h-h*dudy;

      // F2 = 2*mu*T21 - (ruv), G2 = 2*mu*T22 - (rv^2+p)
      s_F[2][n] = q*p/h-h*dvdx;
      s_G[2][n] = p*p/h+p_half*p_grav*h*h-h*dvdy;
    }


    for(int n=0;n<p_cubNp;++n;@inner(0)){
      if (n<p_Np) {
        // prefetch geometric factors (constant on triangle)
        const dfloat drdx = cubvgeo[e*p_Nvgeo + p_RXID];
        const dfloat drdy = cubvgeo[e*p_Nvgeo + p_RYID];
        const dfloat dsdx = cubvgeo[e*p_Nvgeo + p_SXID];
        const dfloat dsdy = cubvgeo[e*p_Nvgeo + p_SYID];

        dfloat df0dr = 0.f, df0ds = 0.f;
        dfloat df1dr = 0.f, df1ds = 0.f;
        dfloat df2dr = 0.f, df2ds = 0.f;
        dfloat dg0dr = 0.f, dg0ds = 0.f;
        dfloat dg1dr = 0.f, dg1ds = 0.f;
        dfloat dg2dr = 0.f, dg2ds = 0.f;

        #pragma unroll p_cubNp
          for(int i=0;i<p_cubNp;++i){
            const dfloat cDrni = cubPDT[n+i*p_Np+0*p_cubNp*p_Np];
            const dfloat cDsni = cubPDT[n+i*p_Np+1*p_cubNp*p_Np];

            df0dr += cDrni*s_F[0][i];
            df1dr += cDrni*s_F[1][i];
            df2dr += cDrni*s_F[2][i];
            df0ds += cDsni*s_F[0][i];
            df1ds += cDsni*s_F[1][i];
            df2ds += cDsni*s_F[2][i];

            dg0dr += cDrni*s_G[0][i];
            dg1dr += cDrni*s_G[1][i];
            dg2dr += cDrni*s_G[2][i];
            dg0ds += cDsni*s_G[0][i];
            dg1ds += cDsni*s_G[1][i];
            dg2ds += cDsni*s_G[2][i];
          }

      const dfloat rhsU0 = drdx*df0dr + dsdx*df0ds + drdy*dg0dr + dsdy*dg0ds;
      const dfloat rhsU1 = drdx*df1dr + dsdx*df1ds + drdy*dg1dr + dsdy*dg1ds;
      const dfloat rhsU2 = drdx*df2dr + dsdx*df2ds + drdy*dg2dr + dsdy*dg2ds;

      const dlong  idx = e*p_Np + n;
      const dfloat xl = x[idx]; const dfloat yl = y[idx];
      dfloat s1,s2,s3;
      SWECSourceTerms2D(xl, yl, t, &s1, &s2, &s3);
      /*
      const dfloat s1=-sin(-xl+t)*cos(-yl+t)-sin(-yl+t)*cos(-xl+t)+cos(-xl+t)+cos(-yl+t)+2*cos(-xl+t)*cos(-yl+t);
      const dfloat s2=-cos(-xl+t)-1/((cos(-xl+t)*cos(-yl+t)+2)*(cos(-xl+t)*cos(-yl+t)+2))*(sin(-xl+t)*sin(-xl+t)*sin(-xl+t))*cos(-yl+t)-2/(cos(-xl+t)*cos(-yl+t)+2)*sin(-xl+t)*cos(-xl+t)+p_grav*(cos(-xl+t)*cos(-yl+t)+2)*sin(-xl+t)*cos(-yl+t)-1/((cos(-xl+t)*cos(-yl+t)+2)*(cos(-xl+t)*cos(-yl+t)+2))*sin(-yl+t)*sin(-yl+t)*sin(-xl+t)*cos(-xl+t)-1/(cos(-xl+t)*cos(-yl+t)+2)*cos(-yl+t)*sin(-xl+t)-sin(-xl+t);
      const dfloat s3=-cos(-yl+t)-1/((cos(-xl+t)*cos(-yl+t)+2)*(cos(-xl+t)*cos(-yl+t)+2))*sin(-yl+t)*sin(-xl+t)*sin(-xl+t)*cos(-yl+t)-1/(cos(-xl+t)*cos(-yl+t)+2)*sin(-yl+t)*cos(-xl+t)-1/((cos(-xl+t)*cos(-yl+t)+2)*(cos(-xl+t)*cos(-yl+t)+2))*sin(-yl+t)*sin(-yl+t)*sin(-yl+t)*cos(-xl+t)-2/(cos(-xl+t)*cos(-yl+t)+2)*sin(-yl+t)*cos(-yl+t)+p_grav*(cos(-xl+t)*cos(-yl+t)+2)*sin(-yl+t)*cos(-xl+t)-sin(-yl+t);
      */

      /*
      const dfloat s1 = -sin(-xl+t)*cos(-yl+t)-sin(-yl+t)*cos(-xl+t)+cos(-xl+t)+cos(-yl+t)+2.0*cos(-xl+t)*cos(-yl+t);
      const dfloat s2 = -cos(-xl+t)-1.0/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-xl+t)*sin(-xl+t)*sin(-xl+t)*cos(-yl+t)-2.0/(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-xl+t)*cos(-xl+t)+p_grav*(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-xl+t)*cos(-yl+t)-1.0/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-xl+t)*sin(-yl+t)*sin(-yl+t)*cos(-xl+t)-1.0/(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-xl+t)*cos(-yl+t)-sin(-xl+t)*cos(-yl+t)*(cos(-xl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)+sin(-xl+t)*sin(-xl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*cos(-yl+t))-(cos(-xl+t)*cos(-yl+t)+2.0)*(sin(-xl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)-3.0*cos(-xl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-xl+t)*cos(-yl+t)-2.0*sin(-xl+t)*sin(-xl+t)*sin(-xl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*cos(-yl+t)*cos(-yl+t))+1.0/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-xl+t)*sin(-yl+t)*sin(-yl+t)*cos(-xl+t)*cos(-xl+t)+1.0/(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-xl+t)*cos(-yl+t)*cos(-xl+t);
      const dfloat s3 = -cos(-yl+t)-sin(-yl+t)*sin(-xl+t)*sin(-xl+t)*cos(-yl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))-sin(-yl+t)*cos(-xl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)-sin(-yl+t)*sin(-yl+t)*sin(-yl+t)*cos(-xl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))-2.0*sin(-yl+t)*cos(-yl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)+p_grav*(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-yl+t)*cos(-xl+t)+1.0/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-yl+t)*sin(-xl+t)*sin(-xl+t)*cos(-yl+t)*cos(-yl+t)+1.0/(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-yl+t)*cos(-xl+t)*cos(-yl+t)-sin(-yl+t)*cos(-xl+t)*(cos(-yl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)+sin(-yl+t)*sin(-yl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*cos(-xl+t))-(cos(-xl+t)*cos(-yl+t)+2.0)*(sin(-yl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)-3.0*cos(-yl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-yl+t)*cos(-xl+t)-2.0*sin(-yl+t)*sin(-yl+t)*sin(-yl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*cos(-xl+t)*cos(-xl+t));
      */
      const dlong base = e*p_Np*p_Nfields + n;

      // move to rhs
      rhsU[base+0*p_Np] = rhsU0+s1;
      rhsU[base+1*p_Np] = rhsU1+s2;
      rhsU[base+2*p_Np] = rhsU2+s3;
      //printf("e=%d rhsu0=%lf\n ",e,rhsU1);
      }
    }

    } 
    else {
    const dlong eC = mapCurv[e];
    for(int n=0;n<p_cubNp;++n;@inner(0)){      // for all nodes in this element
      if(n<p_Np){
        const dlong  qbase = e*p_Np*p_Nfields + n;
        const dlong id = e*p_Np*p_Ngrads + n;

        const dfloat h  =U[qbase+0*p_Np];
        const dfloat q = U[qbase+1*p_Np];
        const dfloat p = U[qbase+2*p_Np];

        s_U[0][n] = h;
        s_U[1][n] = q;
        s_U[2][n] = p;

        s_gradU[0][n] = gradU[id+0*p_Np];
        s_gradU[1][n] = gradU[id+1*p_Np];
        s_gradU[2][n] = gradU[id+2*p_Np];
        s_gradU[3][n] = gradU[id+3*p_Np];
        s_gradU[4][n] = gradU[id+4*p_Np];
        s_gradU[5][n] = gradU[id+5*p_Np];
        //printf("e=%d s_gradU=%.15lf\n",e,s_gradU[2][n]);
      }
    }

    for(int n=0;n<p_cubNp;++n;@inner(0)){
      const dlong gid = eC*p_cubNp*p_Nvgeo+n;
      const dfloat drdx = cubvgeoCurv[gid + p_RXID*p_cubNp];
      const dfloat drdy = cubvgeoCurv[gid + p_RYID*p_cubNp];
      const dfloat dsdx = cubvgeoCurv[gid + p_SXID*p_cubNp];
      const dfloat dsdy = cubvgeoCurv[gid + p_SYID*p_cubNp];
      const dfloat J    = cubvgeoCurv[gid + p_JID*p_cubNp];
      
      //interpolate to cubature
      dfloat h = 0., q = 0., p = 0.;
      dfloat dhdx = 0., dhdy = 0.;
      dfloat dudx = 0., dudy = 0.;
      dfloat dvdx = 0., dvdy = 0.;
      #pragma unroll p_Np
        for(int i=0;i<p_Np;++i){
          const dfloat cIni = cubInterp[n+i*p_cubNp];
          h += cIni*s_U[0][i];
          q += cIni*s_U[1][i];
          p += cIni*s_U[2][i];

          dhdx += cIni*s_gradU[0][i];
          dhdy += cIni*s_gradU[1][i];
          dudx += cIni*s_gradU[2][i];
          dudy += cIni*s_gradU[3][i];
          dvdx += cIni*s_gradU[4][i];
          dvdy += cIni*s_gradU[5][i];
        }

      // F0 = ru, G0 = rv
      {
      const dfloat f = q-dhdx;
      const dfloat g = p-dhdy;
      s_F[0][n] = J*(drdx*f + drdy*g);
      s_G[0][n] = J*(dsdx*f + dsdy*g);
      }
      //printf("s_F=%lf, ",s_F[0][n]);

      // F1 = 2*mu*T11 - (ru^2+p), G1 = 2*mu*T12 - (rvu)
      {
      const dfloat f = q*q/h+p_half*p_grav*h*h-h*dudx;
      const dfloat g = q*p/h-h*dudy;
      s_F[1][n] = J*(drdx*f + drdy*g);
      s_G[1][n] = J*(dsdx*f + dsdy*g);
      }

      // F2 = 2*mu*T21 - (ruv), G2 = 2*mu*T22 - (rv^2+p)
      {
      const dfloat f = q*p/h-h*dvdx;
      const dfloat g = p*p/h+p_half*p_grav*h*h-h*dvdy;
      s_F[2][n] = J*(drdx*f + drdy*g);
      s_G[2][n] = J*(dsdx*f + dsdy*g);
      }
    }


    for(int n=0;n<p_cubNp;++n;@inner(0)){
      if (n<p_Np) {
        // prefetch geometric factors (constant on triangle)
        /*
        const dfloat drdx = cubvgeo[e*p_Nvgeo + p_RXID];
        const dfloat drdy = cubvgeo[e*p_Nvgeo + p_RYID];
        const dfloat dsdx = cubvgeo[e*p_Nvgeo + p_SXID];
        const dfloat dsdy = cubvgeo[e*p_Nvgeo + p_SYID];
        */


        dfloat rhsU0 = 0.0, rhsU1 = 0.0, rhsU2 = 0.0;

        #pragma unroll p_cubNp
          for(int i=0;i<p_cubNp;++i){
            dlong dbase=eC*2*p_Np*p_cubNp;

            //const dfloat cDrni = cubPDT[n+i*p_Np+0*p_cubNp*p_Np];
            //const dfloat cDsni = cubPDT[n+i*p_Np+1*p_cubNp*p_Np];
            const dfloat cDrni = cubPDTs[dbase+n+i*p_Np+0*p_cubNp*p_Np];
            const dfloat cDsni = cubPDTs[dbase+n+i*p_Np+1*p_cubNp*p_Np];

            rhsU0 += cDrni*s_F[0][i];
            rhsU1 += cDrni*s_F[1][i];
            rhsU2 += cDrni*s_F[2][i];

            rhsU0 += cDsni*s_G[0][i];
            rhsU1 += cDsni*s_G[1][i];
            rhsU2 += cDsni*s_G[2][i];
          }

      const dlong  idx = e*p_Np + n;
      const dfloat xl = x[idx]; const dfloat yl = y[idx];
      dfloat s1,s2,s3;
      SWECSourceTerms2D(xl, yl, t, &s1, &s2, &s3);
      /*
      const dfloat s1=-sin(-xl+t)*cos(-yl+t)-sin(-yl+t)*cos(-xl+t)+cos(-xl+t)+cos(-yl+t)+2*cos(-xl+t)*cos(-yl+t);
      const dfloat s2=-cos(-xl+t)-1/((cos(-xl+t)*cos(-yl+t)+2)*(cos(-xl+t)*cos(-yl+t)+2))*(sin(-xl+t)*sin(-xl+t)*sin(-xl+t))*cos(-yl+t)-2/(cos(-xl+t)*cos(-yl+t)+2)*sin(-xl+t)*cos(-xl+t)+p_grav*(cos(-xl+t)*cos(-yl+t)+2)*sin(-xl+t)*cos(-yl+t)-1/((cos(-xl+t)*cos(-yl+t)+2)*(cos(-xl+t)*cos(-yl+t)+2))*sin(-yl+t)*sin(-yl+t)*sin(-xl+t)*cos(-xl+t)-1/(cos(-xl+t)*cos(-yl+t)+2)*cos(-yl+t)*sin(-xl+t)-sin(-xl+t);
      const dfloat s3=-cos(-yl+t)-1/((cos(-xl+t)*cos(-yl+t)+2)*(cos(-xl+t)*cos(-yl+t)+2))*sin(-yl+t)*sin(-xl+t)*sin(-xl+t)*cos(-yl+t)-1/(cos(-xl+t)*cos(-yl+t)+2)*sin(-yl+t)*cos(-xl+t)-1/((cos(-xl+t)*cos(-yl+t)+2)*(cos(-xl+t)*cos(-yl+t)+2))*sin(-yl+t)*sin(-yl+t)*sin(-yl+t)*cos(-xl+t)-2/(cos(-xl+t)*cos(-yl+t)+2)*sin(-yl+t)*cos(-yl+t)+p_grav*(cos(-xl+t)*cos(-yl+t)+2)*sin(-yl+t)*cos(-xl+t)-sin(-yl+t);
      */
     /*
      const dfloat s1 = -sin(-xl+t)*cos(-yl+t)-sin(-yl+t)*cos(-xl+t)+cos(-xl+t)+cos(-yl+t)+2.0*cos(-xl+t)*cos(-yl+t);
      const dfloat s2 = -cos(-xl+t)-1.0/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-xl+t)*sin(-xl+t)*sin(-xl+t)*cos(-yl+t)-2.0/(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-xl+t)*cos(-xl+t)+p_grav*(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-xl+t)*cos(-yl+t)-1.0/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-xl+t)*sin(-yl+t)*sin(-yl+t)*cos(-xl+t)-1.0/(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-xl+t)*cos(-yl+t)-sin(-xl+t)*cos(-yl+t)*(cos(-xl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)+sin(-xl+t)*sin(-xl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*cos(-yl+t))-(cos(-xl+t)*cos(-yl+t)+2.0)*(sin(-xl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)-3.0*cos(-xl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-xl+t)*cos(-yl+t)-2.0*sin(-xl+t)*sin(-xl+t)*sin(-xl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*cos(-yl+t)*cos(-yl+t))+1.0/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-xl+t)*sin(-yl+t)*sin(-yl+t)*cos(-xl+t)*cos(-xl+t)+1.0/(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-xl+t)*cos(-yl+t)*cos(-xl+t);
      const dfloat s3 = -cos(-yl+t)-sin(-yl+t)*sin(-xl+t)*sin(-xl+t)*cos(-yl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))-sin(-yl+t)*cos(-xl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)-sin(-yl+t)*sin(-yl+t)*sin(-yl+t)*cos(-xl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))-2.0*sin(-yl+t)*cos(-yl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)+p_grav*(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-yl+t)*cos(-xl+t)+1.0/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-yl+t)*sin(-xl+t)*sin(-xl+t)*cos(-yl+t)*cos(-yl+t)+1.0/(cos(-xl+t)*cos(-yl+t)+2.0)*sin(-yl+t)*cos(-xl+t)*cos(-yl+t)-sin(-yl+t)*cos(-xl+t)*(cos(-yl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)+sin(-yl+t)*sin(-yl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*cos(-xl+t))-(cos(-xl+t)*cos(-yl+t)+2.0)*(sin(-yl+t)/(cos(-xl+t)*cos(-yl+t)+2.0)-3.0*cos(-yl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*sin(-yl+t)*cos(-xl+t)-2.0*sin(-yl+t)*sin(-yl+t)*sin(-yl+t)/((cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0)*(cos(-xl+t)*cos(-yl+t)+2.0))*cos(-xl+t)*cos(-xl+t));
      */

      const dlong base = e*p_Np*p_Nfields + n;

      // move to rhs
      rhsU[base+0*p_Np] = rhsU0+s1;
      rhsU[base+1*p_Np] = rhsU1+s2;
      rhsU[base+2*p_Np] = rhsU2+s3;
      //printf("e=%d rhsU1=%lf\n",e,rhsU1);
      }
    }
  }
  //printf("\n_______________________\n");
  }
}


